// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/server/model/content.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/server/model/content.go -destination ./pkg/server/model/mock/mock_content.go
//

// Package mock_model is a generated GoMock package.
package mock_model

import (
	sql "database/sql"
	reflect "reflect"
	model "reviewArchive/pkg/server/model"

	gomock "go.uber.org/mock/gomock"
)

// MockContentRepositoryInterface is a mock of ContentRepositoryInterface interface.
type MockContentRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContentRepositoryInterfaceMockRecorder
}

// MockContentRepositoryInterfaceMockRecorder is the mock recorder for MockContentRepositoryInterface.
type MockContentRepositoryInterfaceMockRecorder struct {
	mock *MockContentRepositoryInterface
}

// NewMockContentRepositoryInterface creates a new mock instance.
func NewMockContentRepositoryInterface(ctrl *gomock.Controller) *MockContentRepositoryInterface {
	mock := &MockContentRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockContentRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentRepositoryInterface) EXPECT() *MockContentRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteContentByContentID mocks base method.
func (m *MockContentRepositoryInterface) DeleteContentByContentID(id int, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContentByContentID", id, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContentByContentID indicates an expected call of DeleteContentByContentID.
func (mr *MockContentRepositoryInterfaceMockRecorder) DeleteContentByContentID(id, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentByContentID", reflect.TypeOf((*MockContentRepositoryInterface)(nil).DeleteContentByContentID), id, tx)
}

// InsertContent mocks base method.
func (m *MockContentRepositoryInterface) InsertContent(record *model.Content, tx *sql.Tx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertContent", record, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertContent indicates an expected call of InsertContent.
func (mr *MockContentRepositoryInterfaceMockRecorder) InsertContent(record, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertContent", reflect.TypeOf((*MockContentRepositoryInterface)(nil).InsertContent), record, tx)
}

// SelectContent mocks base method.
func (m *MockContentRepositoryInterface) SelectContent() ([]*model.ContentWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectContent")
	ret0, _ := ret[0].([]*model.ContentWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectContent indicates an expected call of SelectContent.
func (mr *MockContentRepositoryInterfaceMockRecorder) SelectContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContent", reflect.TypeOf((*MockContentRepositoryInterface)(nil).SelectContent))
}

// SelectContentByContentID mocks base method.
func (m *MockContentRepositoryInterface) SelectContentByContentID(id int) (*model.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectContentByContentID", id)
	ret0, _ := ret[0].(*model.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectContentByContentID indicates an expected call of SelectContentByContentID.
func (mr *MockContentRepositoryInterfaceMockRecorder) SelectContentByContentID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContentByContentID", reflect.TypeOf((*MockContentRepositoryInterface)(nil).SelectContentByContentID), id)
}

// SelectContentByKeywordsAndUserID mocks base method.
func (m *MockContentRepositoryInterface) SelectContentByKeywordsAndUserID(keyword string, userID int) ([]*model.ContentWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectContentByKeywordsAndUserID", keyword, userID)
	ret0, _ := ret[0].([]*model.ContentWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectContentByKeywordsAndUserID indicates an expected call of SelectContentByKeywordsAndUserID.
func (mr *MockContentRepositoryInterfaceMockRecorder) SelectContentByKeywordsAndUserID(keyword, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContentByKeywordsAndUserID", reflect.TypeOf((*MockContentRepositoryInterface)(nil).SelectContentByKeywordsAndUserID), keyword, userID)
}

// SelectContentByUserID mocks base method.
func (m *MockContentRepositoryInterface) SelectContentByUserID(userID int) ([]*model.ContentWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectContentByUserID", userID)
	ret0, _ := ret[0].([]*model.ContentWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectContentByUserID indicates an expected call of SelectContentByUserID.
func (mr *MockContentRepositoryInterfaceMockRecorder) SelectContentByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContentByUserID", reflect.TypeOf((*MockContentRepositoryInterface)(nil).SelectContentByUserID), userID)
}

// UpdateContentByContentID mocks base method.
func (m *MockContentRepositoryInterface) UpdateContentByContentID(id int, record *model.Content, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContentByContentID", id, record, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContentByContentID indicates an expected call of UpdateContentByContentID.
func (mr *MockContentRepositoryInterfaceMockRecorder) UpdateContentByContentID(id, record, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContentByContentID", reflect.TypeOf((*MockContentRepositoryInterface)(nil).UpdateContentByContentID), id, record, tx)
}
