// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/server/model/keyword.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/server/model/keyword.go -destination ./pkg/server/model/mock/mock_keyword.go
//

// Package mock_model is a generated GoMock package.
package mock_model

import (
	sql "database/sql"
	reflect "reflect"
	model "reviewArchive/pkg/server/model"

	gomock "go.uber.org/mock/gomock"
)

// MockKeywordRepositoryInterface is a mock of KeywordRepositoryInterface interface.
type MockKeywordRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKeywordRepositoryInterfaceMockRecorder
}

// MockKeywordRepositoryInterfaceMockRecorder is the mock recorder for MockKeywordRepositoryInterface.
type MockKeywordRepositoryInterfaceMockRecorder struct {
	mock *MockKeywordRepositoryInterface
}

// NewMockKeywordRepositoryInterface creates a new mock instance.
func NewMockKeywordRepositoryInterface(ctrl *gomock.Controller) *MockKeywordRepositoryInterface {
	mock := &MockKeywordRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockKeywordRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeywordRepositoryInterface) EXPECT() *MockKeywordRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteKeywordByID mocks base method.
func (m *MockKeywordRepositoryInterface) DeleteKeywordByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeywordByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeywordByID indicates an expected call of DeleteKeywordByID.
func (mr *MockKeywordRepositoryInterfaceMockRecorder) DeleteKeywordByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeywordByID", reflect.TypeOf((*MockKeywordRepositoryInterface)(nil).DeleteKeywordByID), id)
}

// InsertKeyword mocks base method.
func (m *MockKeywordRepositoryInterface) InsertKeyword(keyword string, tx *sql.Tx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKeyword", keyword, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertKeyword indicates an expected call of InsertKeyword.
func (mr *MockKeywordRepositoryInterfaceMockRecorder) InsertKeyword(keyword, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKeyword", reflect.TypeOf((*MockKeywordRepositoryInterface)(nil).InsertKeyword), keyword, tx)
}

// SelectIDByContentKeyword mocks base method.
func (m *MockKeywordRepositoryInterface) SelectIDByContentKeyword(contentKeyword string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectIDByContentKeyword", contentKeyword)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectIDByContentKeyword indicates an expected call of SelectIDByContentKeyword.
func (mr *MockKeywordRepositoryInterfaceMockRecorder) SelectIDByContentKeyword(contentKeyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectIDByContentKeyword", reflect.TypeOf((*MockKeywordRepositoryInterface)(nil).SelectIDByContentKeyword), contentKeyword)
}

// SelectKeywordByID mocks base method.
func (m *MockKeywordRepositoryInterface) SelectKeywordByID(id int) ([]*model.Keyword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectKeywordByID", id)
	ret0, _ := ret[0].([]*model.Keyword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectKeywordByID indicates an expected call of SelectKeywordByID.
func (mr *MockKeywordRepositoryInterfaceMockRecorder) SelectKeywordByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectKeywordByID", reflect.TypeOf((*MockKeywordRepositoryInterface)(nil).SelectKeywordByID), id)
}

// SelectKeywordIDByKeyword mocks base method.
func (m *MockKeywordRepositoryInterface) SelectKeywordIDByKeyword(keyword string, tx *sql.Tx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectKeywordIDByKeyword", keyword, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectKeywordIDByKeyword indicates an expected call of SelectKeywordIDByKeyword.
func (mr *MockKeywordRepositoryInterfaceMockRecorder) SelectKeywordIDByKeyword(keyword, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectKeywordIDByKeyword", reflect.TypeOf((*MockKeywordRepositoryInterface)(nil).SelectKeywordIDByKeyword), keyword, tx)
}

// SelectStringKeywordByID mocks base method.
func (m *MockKeywordRepositoryInterface) SelectStringKeywordByID(contentID int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectStringKeywordByID", contentID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectStringKeywordByID indicates an expected call of SelectStringKeywordByID.
func (mr *MockKeywordRepositoryInterfaceMockRecorder) SelectStringKeywordByID(contentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectStringKeywordByID", reflect.TypeOf((*MockKeywordRepositoryInterface)(nil).SelectStringKeywordByID), contentID)
}
