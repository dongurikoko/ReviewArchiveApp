// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/server/model/tagging.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/server/model/tagging.go -destination ./pkg/server/model/mock/mock_tagging.go
//

// Package mock_model is a generated GoMock package.
package mock_model

import (
	sql "database/sql"
	reflect "reflect"
	model "reviewArchive/pkg/server/model"

	gomock "go.uber.org/mock/gomock"
)

// MockTaggingRepositoryInterface is a mock of TaggingRepositoryInterface interface.
type MockTaggingRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaggingRepositoryInterfaceMockRecorder
}

// MockTaggingRepositoryInterfaceMockRecorder is the mock recorder for MockTaggingRepositoryInterface.
type MockTaggingRepositoryInterfaceMockRecorder struct {
	mock *MockTaggingRepositoryInterface
}

// NewMockTaggingRepositoryInterface creates a new mock instance.
func NewMockTaggingRepositoryInterface(ctrl *gomock.Controller) *MockTaggingRepositoryInterface {
	mock := &MockTaggingRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTaggingRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaggingRepositoryInterface) EXPECT() *MockTaggingRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteTaggingByContentID mocks base method.
func (m *MockTaggingRepositoryInterface) DeleteTaggingByContentID(contentID int, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaggingByContentID", contentID, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaggingByContentID indicates an expected call of DeleteTaggingByContentID.
func (mr *MockTaggingRepositoryInterfaceMockRecorder) DeleteTaggingByContentID(contentID, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaggingByContentID", reflect.TypeOf((*MockTaggingRepositoryInterface)(nil).DeleteTaggingByContentID), contentID, tx)
}

// InsertTagging mocks base method.
func (m *MockTaggingRepositoryInterface) InsertTagging(record *model.Tagging, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTagging", record, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTagging indicates an expected call of InsertTagging.
func (mr *MockTaggingRepositoryInterfaceMockRecorder) InsertTagging(record, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTagging", reflect.TypeOf((*MockTaggingRepositoryInterface)(nil).InsertTagging), record, tx)
}
